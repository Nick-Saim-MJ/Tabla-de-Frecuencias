/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tablafrecuencias;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author IOT
 */
public class Main extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Main.class.getName());

    /**
     * Creates new form Main
     */
    public Main() {
        String[] columnas = {"Intervalos", "fi", "Fi"};
        modelo = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Solo la columna fi (índice 1) es editable
                return column == 1;
            }
        };
        initComponents();
        lblRellenar.setText("");
        setLocationRelativeTo(null);
        agregarListenerParaActivarBoton();    
        
        JTextField textField = new JTextField();
        // Agregar un KeyListener que permita solo números
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                // Bloquear todo lo que no sea dígito o tecla de borrado
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
                    e.consume();
                }
            }
        });

        DefaultCellEditor numericEditor = new DefaultCellEditor(textField);
        tblFreq.getColumnModel().getColumn(1).setCellEditor(numericEditor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtLimiteInferior = new javax.swing.JTextField();
        txtAmplitud = new javax.swing.JTextField();
        txtNumIntervalos = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFreq = new javax.swing.JTable();
        btnGenInter = new javax.swing.JButton();
        btnResultados = new javax.swing.JButton();
        lblRellenar = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("MS Gothic", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tabla de distribución de frecuencias");

        jLabel2.setText("Límite inferior");

        jLabel3.setText("Amplitud");

        jLabel4.setText("N. de Intervalos");

        txtLimiteInferior.setActionCommand("<Not Set>");
        txtLimiteInferior.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtLimiteInferior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLimiteInferiorActionPerformed(evt);
            }
        });
        txtLimiteInferior.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLimiteInferiorKeyTyped(evt);
            }
        });

        txtAmplitud.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmplitudKeyTyped(evt);
            }
        });

        txtNumIntervalos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumIntervalosKeyTyped(evt);
            }
        });

        tblFreq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Intervalos", "fi", "Fi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFreq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblFreqKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tblFreq);

        btnGenInter.setText("Generar Intervalos");
        btnGenInter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGenInterMouseClicked(evt);
            }
        });
        btnGenInter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenInterActionPerformed(evt);
            }
        });
        btnGenInter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnGenInterKeyPressed(evt);
            }
        });

        btnResultados.setText("Generar Resultados");
        btnResultados.setEnabled(false);
        btnResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultadosActionPerformed(evt);
            }
        });

        lblRellenar.setText("Rellena los campos de la frecuencia (fi)");

        btnCerrar.setText("Cerrar Programa");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(lblRellenar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnResultados)
                                .addGap(67, 67, 67)
                                .addComponent(btnCerrar))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnGenInter)
                                .addGap(185, 185, 185))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLimiteInferior, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmplitud, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNumIntervalos, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)))))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtLimiteInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmplitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumIntervalos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGenInter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRellenar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResultados)
                    .addComponent(btnCerrar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLimiteInferiorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimiteInferiorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLimiteInferiorActionPerformed

    private void txtLimiteInferiorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLimiteInferiorKeyTyped
        char k = evt.getKeyChar();
        
        if(!Character.isDigit(k)){
            evt.consume();
        }
    }//GEN-LAST:event_txtLimiteInferiorKeyTyped

    private void txtAmplitudKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmplitudKeyTyped
        char k = evt.getKeyChar();
        
        if(!Character.isDigit(k)){
            evt.consume();
        
        }    }//GEN-LAST:event_txtAmplitudKeyTyped

    private void txtNumIntervalosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumIntervalosKeyTyped
        char k = evt.getKeyChar();
        
        if(!Character.isDigit(k)){
            evt.consume();
        }
    }//GEN-LAST:event_txtNumIntervalosKeyTyped

    private void btnGenInterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenInterActionPerformed
        generarIntervalos();
    }//GEN-LAST:event_btnGenInterActionPerformed

    private void btnGenInterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnGenInterKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGenInterKeyPressed

    private void btnGenInterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGenInterMouseClicked

    }//GEN-LAST:event_btnGenInterMouseClicked

    private void btnResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultadosActionPerformed
        Resultado r = new Resultado(modelo);
        r.setVisible(true);

    }//GEN-LAST:event_btnResultadosActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void tblFreqKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblFreqKeyTyped
        char k = evt.getKeyChar();
        
        if(!Character.isDigit(k)){
            evt.consume();
        }
    }//GEN-LAST:event_tblFreqKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGenInter;
    private javax.swing.JButton btnResultados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRellenar;
    private javax.swing.JTable tblFreq;
    private javax.swing.JTextField txtAmplitud;
    private javax.swing.JTextField txtLimiteInferior;
    private javax.swing.JTextField txtNumIntervalos;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelo;

    private void generarIntervalos() {
        try {
            // Obtener valores de los campos de texto
            double limiteInferior = Double.parseDouble(txtLimiteInferior.getText().trim());
            double amplitud = Double.parseDouble(txtAmplitud.getText().trim());
            int numIntervalos = Integer.parseInt(txtNumIntervalos.getText().trim());
            
            // Validar que los valores sean válidos
            if (amplitud <= 0) {
                JOptionPane.showMessageDialog(this, "La amplitud debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (numIntervalos <= 0) {
                JOptionPane.showMessageDialog(this, "El número de intervalos debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Limpiar la tabla antes de agregar nuevos datos
            modelo.setRowCount(0);
            
            // Generar los intervalos
            double limiteActual = limiteInferior;
            
            for (int i = 0; i < numIntervalos; i++) {
                double limiteSuperior = limiteActual + amplitud;
                
                // Formatear el intervalo como cadena
                String intervalo;
                if (i == 0) {
                    // Primer intervalo: [limiteInf, limiteSup)
                    intervalo = String.format("[%.2f, %.2f)", limiteActual, limiteSuperior);
                } else if (i == numIntervalos - 1) {
                    // Último intervalo: [limiteInf, limiteSup]
                    intervalo = String.format("[%.2f, %.2f]", limiteActual, limiteSuperior);
                } else {
                    // Intervalos intermedios: [limiteInf, limiteSup)
                    intervalo = String.format("[%.2f, %.2f)", limiteActual, limiteSuperior);
                }
                
                // Agregar fila a la tabla: [Intervalo, fi vacío, Fi vacío]
                modelo.addRow(new Object[]{intervalo, "", ""});
                
                // Actualizar límite para el siguiente intervalo
                limiteActual = limiteSuperior;
            }
            tblFreq.setModel(modelo);
            // Agregar listener para calcular Fi automáticamente cuando se modifique fi
            agregarListenerFrecuenciaAcumulada();
            
            //JOptionPane.showMessageDialog(this, "Intervalos generados correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            lblRellenar.setText("Rellena los campos de la frecuencia (fi)");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese valores numéricos válidos", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al generar intervalos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void agregarListenerFrecuenciaAcumulada() {
        // Agregar listener para calcular automáticamente Fi cuando cambie fi
        modelo.addTableModelListener(e -> {
            if (e.getColumn() == 1) { // Si se modificó la columna fi
                calcularFrecuenciaAcumulada();
            }
        });
    }
    
    private void calcularFrecuenciaAcumulada() {
        int filas = modelo.getRowCount();
        double acumulado = 0;
        
        for (int i = 0; i < filas; i++) {
            Object valorFi = modelo.getValueAt(i, 1);
            
            if (valorFi != null && !valorFi.toString().trim().isEmpty()) {
                try {
                    double fi = Double.parseDouble(valorFi.toString().trim());
                    acumulado += fi;
                    modelo.setValueAt(String.format("%.0f", acumulado), i, 2);
                } catch (NumberFormatException ex) {
                    // Si no es un número válido, mantener Fi vacío
                    modelo.setValueAt("", i, 2);
                }
            } else {
                // Si fi está vacío, mantener Fi vacío también
                modelo.setValueAt("", i, 2);
            }
        }
    }
    private void agregarListenerParaActivarBoton() {
        modelo.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // Solo procesar cambios en la columna fi (índice 1) o cambios estructurales
                if (e.getColumn() == 1 || e.getColumn() == TableModelEvent.ALL_COLUMNS) {
                    verificarDatosCompletos();
                }
            }
        });
    }
    private void verificarDatosCompletos() {
        boolean todosCompletos = todosLosDatosEstanCompletos();
        btnResultados.setEnabled(todosCompletos);
    }

    private boolean todosLosDatosEstanCompletos() {
        int filas = modelo.getRowCount();

        if (filas == 0) return false;

        for (int i = 0; i < filas; i++) {
            Object valor = modelo.getValueAt(i, 1); // Columna fi
            if (valor == null || valor.toString().trim().isEmpty()) {
                return false;
            }
        }
        return true;
    }
}
