/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tablafrecuencias;

import java.awt.List;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Resultado extends javax.swing.JFrame {

    /**
     * Creates new form Resultado
     */
    DefaultTableModel modelo = new DefaultTableModel();
    public Resultado(DefaultTableModel model) {
        modelo=model;
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });
        tblFreq.setModel(model);
        double media = calcularMedia();
        double mediana = calcularMediana();
        double moda = calcularModa();
        double q1 = calcularCuartil(1);
        double q2 = calcularCuartil(2);
        double q3 = calcularCuartil(3);
        
        double rango = calcularRango();
        double varianza = calcularVarianza();
        double desviacion = calcularDesviacionEstandar();
        double coefVariacion = calcularCoeficienteVariacion();
        double rangoIQ = calcularRangoIntercuartilico();
        lblNmMedia.setText(String.valueOf(media));
        lblNmMediana.setText(String.valueOf(mediana));
        lblNmModa.setText(String.valueOf(moda));
        
        lblRango.setText(String.valueOf(rango));
        lblVarianza.setText(String.valueOf(varianza));
        lblDesEs.setText(String.valueOf(desviacion));
        lblCoVa.setText(String.valueOf(coefVariacion));
        lblRanInt.setText(String.valueOf(rangoIQ));
        
        String[] opciones = {"Cuartil", "Decil", "Percentil"};
        this.cmbTipo.removeAllItems();
        for(Integer i=0;i<opciones.length;i++){
            this.cmbTipo.addItem(opciones[i]);
        }
    }
    public static class Intervalo {
        public double limiteInferior;
        public double limiteSuperior;
        public double marcaClase;
        public int frecuencia;
        public int frecuenciaAcumulada;
        
        public Intervalo(double limInf, double limSup, int freq) {
            this.limiteInferior = limInf;
            this.limiteSuperior = limSup;
            this.marcaClase = (limInf + limSup) / 2.0;
            this.frecuencia = freq;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFreq = new javax.swing.JTable();
        btnCerrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblNmMedia = new javax.swing.JLabel();
        lblNmMediana = new javax.swing.JLabel();
        lblNmModa = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        txtNum = new javax.swing.JTextField();
        btnCalcular = new javax.swing.JButton();
        txtRespuesta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblRango = new javax.swing.JLabel();
        lblVarianza = new javax.swing.JLabel();
        lblDesEs = new javax.swing.JLabel();
        lblCoVa = new javax.swing.JLabel();
        lblRanInt = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Roboto Condensed", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Resultados");

        tblFreq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Intervalos", "fi", "Fi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFreq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblFreqKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tblFreq);

        btnCerrar.setText("Cerrar Ventana");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Medidas de posición");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Medidas de dispersión");

        jLabel4.setText("Media");

        jLabel5.setText("Mediana");

        jLabel6.setText("Moda");

        lblNmMedia.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNmMedia.setText("0");

        lblNmMediana.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNmMediana.setText("0");

        lblNmModa.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNmModa.setText("0");

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumKeyTyped(evt);
            }
        });

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        txtRespuesta.setText("Respuesta");

        jLabel7.setText("Rango");

        jLabel8.setText("Varianza");

        jLabel9.setText("Coeficiente de variación");

        jLabel10.setText("Desviación estándar");

        jLabel11.setText("Rango intercuartil");

        lblRango.setText("0");

        lblVarianza.setText("0");

        lblDesEs.setText("0");

        lblCoVa.setText("0");

        lblRanInt.setText("0");

        jLabel13.setText("Cuartil: Números del 1 al 4");

        jLabel14.setText("Decil: Números del 1 al 10");

        jLabel15.setText("Percentil: Números del 1 al 100");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNmMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNmMediana, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNmModa, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRango, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblVarianza, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDesEs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCoVa, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRanInt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(btnCerrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCalcular)
                            .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblNmMedia))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblNmMediana))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblNmModa)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblRango))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lblVarianza))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(lblDesEs))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(lblCoVa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(lblRanInt))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCalcular)
                            .addComponent(txtRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                        .addComponent(btnCerrar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        String tipo=cmbTipo.getSelectedItem().toString();
        Integer num=Integer.valueOf(txtNum.getText());
        if(validarRango(tipo, num)){
            txtRespuesta.setText(String.format("%.3f",calcularSegunTipo(tipo, num)));
        }
       
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void txtNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumKeyTyped
        char k = evt.getKeyChar();
        
        if(!Character.isDigit(k)){
            evt.consume();
        }
    }//GEN-LAST:event_txtNumKeyTyped

    private void tblFreqKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblFreqKeyTyped

    }//GEN-LAST:event_tblFreqKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Resultado().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoVa;
    private javax.swing.JLabel lblDesEs;
    private javax.swing.JLabel lblNmMedia;
    private javax.swing.JLabel lblNmMediana;
    private javax.swing.JLabel lblNmModa;
    private javax.swing.JLabel lblRanInt;
    private javax.swing.JLabel lblRango;
    private javax.swing.JLabel lblVarianza;
    private javax.swing.JTable tblFreq;
    private javax.swing.JTextField txtNum;
    private javax.swing.JTextField txtRespuesta;
    // End of variables declaration//GEN-END:variables
    private ArrayList<Intervalo> extraerDatosTabla() {
        ArrayList<Intervalo> intervalos = new ArrayList<>();
        int filas = modelo.getRowCount();
        
        for (int i = 0; i < filas; i++) {
            try {
                // Obtener el intervalo como string
                String intervaloStr = modelo.getValueAt(i, 0).toString();
                
                // Extraer límites del intervalo
                double[] limites = extraerLimites(intervaloStr);
                double limInf = limites[0];
                double limSup = limites[1];
                
                // Obtener frecuencia
                String fiStr = modelo.getValueAt(i, 1).toString().trim();
                int fi = Integer.parseInt(fiStr);
                
                // Crear intervalo
                Intervalo intervalo = new Intervalo(limInf, limSup, fi);
                intervalos.add(intervalo);
                
            } catch (Exception e) {
                System.err.println("Error procesando fila " + i + ": " + e.getMessage());
            }
        }
        
        // Calcular frecuencias acumuladas
        int acumulada = 0;
        for (Intervalo intervalo : intervalos) {
            acumulada += intervalo.frecuencia;
            intervalo.frecuenciaAcumulada = acumulada;
        }
        
        return intervalos;
    }
    
    // Método auxiliar para extraer límites de un string como "[10.0, 15.0)"
    private double[] extraerLimites(String intervaloStr) {
        // Remover corchetes y paréntesis
        String limpio = intervaloStr.replaceAll("[\\[\\]\\(\\)]", "");
        String[] partes = limpio.split(",");
        
        double limInf = Double.parseDouble(partes[0].trim());
        double limSup = Double.parseDouble(partes[1].trim());
        
        return new double[]{limInf, limSup};
    }
    
    // =============== MEDIDAS DE POSICIÓN ===============
    
    // 1. MEDIA ARITMÉTICA
    public double calcularMedia() {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        double sumaXF = 0;
        int sumaF = 0;
        
        for (Intervalo intervalo : intervalos) {
            sumaXF += intervalo.marcaClase * intervalo.frecuencia;
            sumaF += intervalo.frecuencia;
        }
        
        return sumaF > 0 ? sumaXF / sumaF : 0;
    }
    
    // 2. MEDIANA
    public double calcularMediana() {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        int n = intervalos.stream().mapToInt(i -> i.frecuencia).sum();
        double posicionMediana = n / 2.0;
        
        // Encontrar el intervalo que contiene la mediana
        Intervalo intervaloMediana = null;
        int frecAcumAnterior = 0;
        
        for (Intervalo intervalo : intervalos) {
            if (intervalo.frecuenciaAcumulada >= posicionMediana) {
                intervaloMediana = intervalo;
                break;
            }
            frecAcumAnterior = intervalo.frecuenciaAcumulada;
        }
        
        if (intervaloMediana == null) return 0;
        
        // Fórmula de mediana para datos agrupados
        double Li = intervaloMediana.limiteInferior;
        double h = intervaloMediana.limiteSuperior - intervaloMediana.limiteInferior;
        double fi = intervaloMediana.frecuencia;
        double Fi_1 = frecAcumAnterior;
        
        return Li + ((posicionMediana - Fi_1) / fi) * h;
    }
    
    // 3. MODA
    public double calcularModa() {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        
        // Encontrar el intervalo con mayor frecuencia
        Intervalo intervaloModal = intervalos.stream()
            .max((i1, i2) -> Integer.compare(i1.frecuencia, i2.frecuencia))
            .orElse(null);
        
        if (intervaloModal == null) return 0;
        
        // Buscar frecuencias anterior y posterior
        int indice = intervalos.indexOf(intervaloModal);
        int fi_1 = (indice > 0) ? intervalos.get(indice - 1).frecuencia : 0;
        int fi1 = (indice < intervalos.size() - 1) ? intervalos.get(indice + 1).frecuencia : 0;
        
        double Li = intervaloModal.limiteInferior;
        double h = intervaloModal.limiteSuperior - intervaloModal.limiteInferior;
        double fi = intervaloModal.frecuencia;
        
        double d1 = fi - fi_1;
        double d2 = fi - fi1;
        
        if (d1 + d2 == 0) return Li + h / 2; // Centro del intervalo si no se puede calcular
        
        return Li + (d1 / (d1 + d2)) * h;
    }
    
    // =============== MEDIDAS DE DISPERSIÓN ===============
    
    // 1. RANGO
    public double calcularRango() {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        if (intervalos.isEmpty()) return 0;
        
        double minimo = intervalos.get(0).limiteInferior;
        double maximo = intervalos.get(intervalos.size() - 1).limiteSuperior;
        
        return maximo - minimo;
    }
    
    // 2. VARIANZA
    public double calcularVarianza() {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        double media = calcularMedia();
        double sumaDesviaciones = 0;
        int sumaF = 0;
        
        for (Intervalo intervalo : intervalos) {
            double desviacion = intervalo.marcaClase - media;
            sumaDesviaciones += desviacion * desviacion * intervalo.frecuencia;
            sumaF += intervalo.frecuencia;
        }
        
        return sumaF > 0 ? sumaDesviaciones / sumaF : 0;
    }
    
    // 3. DESVIACIÓN ESTÁNDAR
    public double calcularDesviacionEstandar() {
        return Math.sqrt(calcularVarianza());
    }
    
    // 4. COEFICIENTE DE VARIACIÓN
    public double calcularCoeficienteVariacion() {
        double media = calcularMedia();
        double desviacion = calcularDesviacionEstandar();
        
        return media != 0 ? (desviacion / media) * 100 : 0;
    }
    
    // 5. RANGO INTERCUARTÍLICO
    public double calcularRangoIntercuartilico() {
        return calcularCuartil(3) - calcularCuartil(1);
    }  

    // VALIDAR RANGOS SEGÚN EL TIPO
    private boolean validarRango(String tipo, int numero) {
        switch (tipo) {
            case "Cuartil":
                if (numero < 1 || numero > 3) {
                    mostrarError("Los cuartiles válidos son: 1, 2, 3");
                    return false;
                }
                break;
                
            case "Decil":
                if (numero < 1 || numero > 9) {
                    mostrarError("Los deciles válidos son: 1, 2, 3, 4, 5, 6, 7, 8, 9");
                    return false;
                }
                break;
                
            case "Percentil":
                if (numero < 1 || numero > 99) {
                    mostrarError("Los percentiles válidos son: 1 a 99");
                    return false;
                }
                break;
        }
        return true;
    }
    
    // CALCULAR SEGÚN EL TIPO SELECCIONADO
    private double calcularSegunTipo(String tipo, int numero) {
        switch (tipo) {
            case "Cuartil":
                return calcularCuartil(numero);
            case "Decil":
                return calcularDecil(numero);
            case "Percentil":
                return calcularPercentil(numero);
            default:
                throw new IllegalArgumentException("Tipo no válido: " + tipo);
        }
    }
    
    // MÉTODO GENÉRICO PARA CALCULAR CUALQUIER MEDIDA DE POSICIÓN
    private double calcularMedidaPosicionGenerica(int k, int divisiones) {
        ArrayList<Intervalo> intervalos = extraerDatosTabla();
        int n = intervalos.stream().mapToInt(i -> i.frecuencia).sum();
        
        // Calcular la posición
        double posicion = (k * n) / (double) divisiones;
        
        // Encontrar el intervalo que contiene esa posición
        Intervalo intervaloObjetivo = null;
        int frecAcumAnterior = 0;
        
        for (Intervalo intervalo : intervalos) {
            if (intervalo.frecuenciaAcumulada >= posicion) {
                intervaloObjetivo = intervalo;
                break;
            }
            frecAcumAnterior = intervalo.frecuenciaAcumulada;
        }
        
        if (intervaloObjetivo == null) {
            //throw new RuntimeException("No se pudo encontrar el intervalo objetivo");
            mostrarError("No se pudo encontrar el intervalo objetivo.");
        }
        
        // Aplicar la fórmula de interpolación
        double Li = intervaloObjetivo.limiteInferior;
        double h = intervaloObjetivo.limiteSuperior - intervaloObjetivo.limiteInferior;
        double fi = intervaloObjetivo.frecuencia;
        double Fi_1 = frecAcumAnterior;
        
        return Li + ((posicion - Fi_1) / fi) * h;
    }
    
    // CALCULAR CUARTIL ESPECÍFICO
    private double calcularCuartil(int q) {
        return calcularMedidaPosicionGenerica(q, 4);
    }
    
    // CALCULAR DECIL ESPECÍFICO
    private double calcularDecil(int d) {
        return calcularMedidaPosicionGenerica(d, 10);
    }
    
    // CALCULAR PERCENTIL ESPECÍFICO
    private double calcularPercentil(int p) {
        return calcularMedidaPosicionGenerica(p, 100);
    }
    private void mostrarError(String mensaje) {
        txtRespuesta.setText("");
        JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
